<% layout('layouts/boilerplate') %>
    <!-- Adding the CSS style sheet for Review Stars animation taken from https://github.com/LunarLogic/starability  -->
    <link rel="stylesheet" href="/stylesheets/starability-basic.css">
    <!-- Saving MapBox token to a variable called 'mapToken', since ejs templating will not work in JS scripts -->
    <script>
        const mapToken = '<%-process.env.MAPBOX_TOKEN%>';
        const campground = <%-JSON.stringify(campground) %>; // acess the campground JSON. Use JSON.stringify() to 
        // create proper JSON with all keys inside double-quotes.
        // IMPORTANT VULNERABILITY: Note that using '<%- %>' ejs tags does not escape any HTML conetent or 
        // special characters within it like '<%= %>' does. This helps us get the raw JSON from stringify into the
        // map creation script here, But it is a security vulnerability where cross-site-scripting (XSS) can 
        // be performed to inject html content. This needs to be addressed. As an example, add '<h1>H1</h1>' to a 
        // Campground title and check out the Map Marker Popup Text. Another exploit is to edit the campground title 
        // by adding "<script>alert('haha, got ya !')<\/script>" to the end of a campground title and submitting.
        // One solution is to replace the JOI Validator Schemas we use with Express Validator Schemas as it accounts
        // for these XSS issues as well.
    </script>
    <div class="row">
        <div class="col-6">

            <div id="map"></div>

            <div id="carouselExampleControls" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    <% campground.images.forEach((img, i)=> { %>
                        <div class="carousel-item <%= i == 0 ? 'active' : ''%>">
                            <img src="<%=img.url%>" class="d-block w-100" alt="">
                        </div>
                        <% }) %>
                </div>
                <!-- Display image sliding buttons only when there are more than a single image -->
                <% if(campground.images.length> 1) { %>
                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls"
                        data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls"
                        data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                    <% } %>
            </div>

            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">
                        <%=campground.title%>
                    </h5>
                    <p class="card-text">
                        <%=campground.description%>
                    </p>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item text-muted">
                        <%=campground.location%>
                    </li>
                    <li class="list-group-item">
                        Submitted by <%= campground.author.username%>
                    </li>
                    <li class="list-group-item">
                        $<%=campground.price%>/night
                    </li>
                </ul>
                <!-- If there is currently a user logged in and if that user is the author of the campground being viewed,
                        only then, the edit and delete buttons should be shown in the show page of a campground.
                        Remember that 'res.locals.currentUser' is set to 'req.user' -->
                <!-- CurrentUser._id and review.author are both objects, so when you use the '===' 
                    operator, it checks if they have the same place in memory which is false. 
                    In order to compare the object content, equals() is the correct method. -->
                <% if(currentUser && campground.author.equals(currentUser._id)) { %>
                    <div class="card-body">
                        <a class="card-link btn btn-info" href="/campgrounds/<%=campground._id%>/edit">Edit</a>
                        <form class="d-inline" action="/campgrounds/<%=campground._id%>?_method=DELETE" method="POST">
                            <!-- 'd-inline' class sets the form display to inline, This puts the two buttons on the same 
                            line. By default, the form is a block element. -->
                            <button class="btn btn-danger">Delete</button>
                        </form>
                    </div>
                    <div class="card-footer text-muted">
                        2 days ago
                        <!-- <a href="/campgrounds">All Campgrounds</a> -->
                    </div>
                    <% } %>
            </div>
        </div>
        <div class="col-6">
            <% if(currentUser) { %>
                <h2>Leave a Review</h2>
                <form class="mb-3 validated-form" action="/campgrounds/<%=campground._id%>/reviews" method="POST"
                    novalidate>
                    <!-- novalidate attribute prevents the default html validation behaviour -->
                    <!-- The validated-form class allows custom validation in the form. Our custom javascript function
                    from the boilerplate looks for elements with this class -->
                    <div class="form">
                        <!-- <div class="mb-3">
                            <label class="form-label" for="rating">Rating</label>
                            <input type="range" class="form-range" min="1" max="5" name="review[rating]" id="rating">
                        </div> -->
                        <!-- Refer: https://github.com/LunarLogic/starability for custom star rating animations -->
                        <!-- "review[rating]" will be the request as {review: {rating: value}} -->
                        <fieldset class="starability-basic">
                            <!-- <input type="radio" id="no-rate" class="input-no-rate" name="rating" value="1" checked
                                    aria-label="No rating." /> -->
                            <input type="radio" id="first-rate1" name="review[rating]" value="1" checked />
                            <label for="first-rate1" title="Terrible">1 star</label>
                            <input type="radio" id="first-rate2" name="review[rating]" value="2" />
                            <label for="first-rate2" title="Not good">2 stars</label>
                            <input type="radio" id="first-rate3" name="review[rating]" value="3" />
                            <label for="first-rate3" title="Average">3 stars</label>
                            <input type="radio" id="first-rate4" name="review[rating]" value="4" />
                            <label for="first-rate4" title="Very good">4 stars</label>
                            <input type="radio" id="first-rate5" name="review[rating]" value="5" />
                            <label for="first-rate5" title="Amazing">5 stars</label>
                        </fieldset>
                        <div class="mb-3">
                            <label class="form-label" for="body">Review Text</label>
                            <textarea class="form-control" name="review[body]" id="body" cols="30" rows="3"
                                required></textarea>
                            <!-- "review[body]" will be sent in the request as {review: {body: value}} -->
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                        </div>
                        <button class="btn btn-success">Submit</button>
                    </div>
                </form>
                <% } %>
                    <% for (let review of campground.reviews) { %>
                        <div class="card mb-3">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <%=review.author.username%>
                                </h5>
                                <!-- we can use HTML entities to show ratings in the form of stars and add some colors/logic to it -->
                                <!-- <h5>&#9733;&#9733;&#9733;&#9733;&#9734;</h5> -->
                                <!-- But it is tedious and entity codes are not accessible to screen readers -->
                                <!-- The paragraph element below is showing the static result of rating -->
                                <!-- Refer: https://github.com/LunarLogic/starability -->
                                <p class="starability-result" data-rating="<%=review.rating%>">
                                    Rated: <%=review.rating%> stars
                                </p>
                                <!-- The review.author.username comes from user.username that is created by passport -->
                                <p class="card-text">
                                    Review: <%=review.body%>
                                </p>
                                <!-- If there is currently a user logged in and if that user is the author of the 
                                    any reviews being viewed, only then, the delete button should be shown in the 
                                    show page for each review of a campground.
                                    Remember that 'res.locals.currentUser' is set to 'req.user' -->
                                <!-- CurrentUser._id and review.author are both objects, so when you use the '===' 
                                    operator, it checks if they have the same place in memory which is false. 
                                    In order to compare the object content, equals() is the correct method. -->
                                <% if(currentUser && review.author.equals(currentUser._id)) { %>
                                    <form
                                        action="/campgrounds/<%=campground._id%>/reviews/<%=review._id%>?_method=DELETE"
                                        method="POST">
                                        <button class="btn btn-sm btn-danger">Delete</button>
                                    </form>
                                    <% } %>
                            </div>
                        </div>
                        <% } %>
        </div>
    </div>
    <script src="/javascripts/showPageMap.js"></script>