<%- layout('layouts/boilerplate') -%>
    <!-- replace the 'body' local in 'layouts/boilerplate.ejs' with all the content below in this template -->

    <div class="row">
        <h1 class="text-center">Edit Campground</h1>
        <div class="col-md-6 offset-md-3">
            <!-- enctype="multipart/form-data" makes the form support file uploads through input tags 
                with type as "file" -->
            <form action="/campgrounds/<%=campground._id%>?_method=PUT" method="POST" novalidate class="validated-form"
                enctype="multipart/form-data">
                <!-- Title -->
                <div class="mb-3">
                    <!-- Remember: form-control class should be added to every text input in a form when using bootstrap
                        styling. Similarly, form-label class should be added to every label -->
                    <label class="form-label" for="title">Title</label>
                    <input class="form-control" type="text" id="title" name="campground[title]" required
                        value="<%=campground.title%>">
                    <div class="valid-feedback">Looks good!</div>
                    <!-- custom validation feedback div should come right below the input -->
                    <!-- campground[title] will put title under the 'campground: value' object when sending the post request -->
                    <!-- set the input to be compulsory using the required attribute so the browser warns when submitting
                        to form that some input is missing -->
                </div>
                <!-- Location -->
                <div class="mb-3">
                    <label class="form-label" for="location">Location</label>
                    <input class="form-control" type="text" id="location" name="campground[location]" required
                        value="<%=campground.location%>">
                    <div class="valid-feedback">Looks good!</div>
                    <!-- custom validation feedback div should come right below the input -->
                    <!-- campground[location] will put 'location: value' under the campground object when sending the post request -->
                    <!-- set the input to be compulsory using the required attribute so the browser warns when submitting
                        to form that some input is missing -->
                </div>
                <!-- Price -->
                <div class="mb-3">
                    <label for="price" class="form-label">Campground Price</label>
                    <div class="input-group">
                        <span class="input-group-text" id="price-label">$</span>
                        <input id="price" type="text" class="form-control" placeholder="0.0" aria-label="price"
                            aria-describedby="price-label" name="campground[price]" required
                            value="<%=campground.price%>">
                        <!-- campground[price] will put 'price: value' under the campground object when sending the post request -->
                        <!-- set the input to be compulsory using the required attribute so the browser warns when submitting
                        to form that some input is missing -->
                        <div class="valid-feedback">Looks good!</div>
                        <!-- custom validation feedback div should come right below the input -->
                    </div>
                </div>
                <!-- Description -->
                <div class="mb-3">
                    <label class="form-label" for="description">Description</label>
                    <textarea class="form-control" type="text" id="description" name="campground[description]"
                        required><%=campground.description%></textarea>
                    <div class="valid-feedback">Looks good!</div> <!-- custom validation feedback -->
                    <!-- campground[image] will put 'image: value' under the campground object when sending the post request -->
                    <!-- set the input to be compulsory using the required attribute so the browser warns when submitting
                        to form that some input is missing -->
                </div>
                <!-- Images -->
                <div class="mb-3">
                    <label for="image" class="form-label">Add More Images</label>
                    <input class="form-control" type="file" id="" name="image" multiple>
                    <!-- multer will look for req.body.image since we use upload.array('image') -->
                    <!-- The multiple attribute allows to upload more than one image -->
                    <!-- <div class="valid-feedback">Looks good!</div> -->
                    <!-- custom validation feedback div should come right below the input -->
                    <!-- campground[image] will put 'image: value' under the campground object when sending the post request -->
                    <!-- set the input to be compulsory using the required attribute so the browser warns when submitting
                                        to form that some input is missing -->
                </div>
                <div class="mb-3">
                    <% campground.images.forEach((img, i)=> { %>
                        <!-- Using the virtual 'thumbnail' property that we created -->
                        <img src="<%=img.thumbnail%>" class="img-thumbnail" alt="">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="image-<%=i%>" name="deleteImages[]"
                                value="<%=img.filename%>">
                            <!-- The name="deleteImages[]" syntax for the name attribute (with the added empty squre brackets at the end) is 
                                important because that will allow our Node.js/Express.js backend application to realize that we are trying to 
                                pass multiple input elements with different values under the same name attribute, and this will automatically 
                                instruct it to create an array of those values from those specific inputs. Basically, our application is 
                                designed to understand this name attribute syntax automatically and parse the data into an array of values 
                                accordingly. -->
                            <!-- We donot store the req.body.deleteImages array in the database-->
                            <label class="form-check-label" for="image-<%=i%>">Delete ?</label>
                        </div>
                        <% }) %>
                </div>
                <div class="mb-3">
                    <button class="btn btn-info">Update Campground</button>
                </div>
            </form>
            <a href="/campgrounds/<%=campground._id%>">Back To Campground</a>
        </div>
    </div>